package templates

import (
	"my5G-RANTester/config"
	"my5G-RANTester/internal/control_test_engine"
	"my5G-RANTester/internal/work_load_model"
	"sync"
	"time"

	log "github.com/sirupsen/logrus"
)

// testing attach for multiple concurrent UEs using an UE per GNB and using poisson and exponential
// distribution.
func TestMultiAttachUesInConcurrencyWithGNBsUsingPoissonAndExponential(samples int, mean float64, seed int) {

	var wg sync.WaitGroup

	cfg, err := config.GetConfig()
	if err != nil {
		log.Fatal("Error in get configuration")
	}

	log.Info("Number of UEs have generated by the Poisson Distribution")
	log.Info("Interval between each sample of UEs has generated by the Exponential Distribution")
	log.Info("[CORE]", cfg.AMF.Name, " Core in Testing")

	// initialized number of UEs generated by Poisson Distribution.
	numberOfUes := 1

	// generated samples of UE by Poisson Distribution.
	workLoad := work_load_model.PoissonDistribution(mean, samples, seed)

	// generated interval between each sample of UEs .
	interval := work_load_model.ExponentialDistribution(mean, samples, seed)

	for j := 0; j < samples; j++ {

		log.Info("Sample with ", int(workLoad[j]), " UEs that was generated by the Poisson Distribution")
		log.Info("Time duration ", int(interval[j]), " between each sample of UEs")

		// Launch several goroutines and increment the WaitGroup counter for each.
		for i := numberOfUes; i < (int(workLoad[j]) + numberOfUes); i++ {
			imsi := control_test_engine.ImsiGenerator(i)
			wg.Add(1)
			go attachUeWithGNB(imsi, cfg, int64(i), &wg)
			// time.Sleep(10* time.Millisecond)
		}

		// wait for multiple goroutines.
		wg.Wait()

		// updated numberOfUes
		numberOfUes += int(workLoad[j])

		// set time duration between each sample of ues.
		if j+1 == samples {
			time.Sleep(0 * time.Second)
		} else {
			time.Sleep(time.Duration(interval[j]) * time.Second)
		}
	}

	// function worked fine.
	//return nil
}
